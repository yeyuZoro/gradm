<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace = "com.manager.gradm.dao.stock.StockDao">

    <resultMap id = "BaseResultMap" type = "Stock"
               extends = "COMMON.BASE_RESULT_MAP">
        <result column = "goods_id" property = "goodsId" />
        <result column = "goods_name" property = "goodsName" />
        <result column = "measure_unit" property = "measureUnit" />
        <result column = "current_stock" property = "currentStock" />
        <result column = "real_stock" property = "realStock" />
        <result column = "diff_stock" property = "diffStock" />
        <result column = "reason" property = "reason" />
    </resultMap>

    <sql id = "BaseColumnList">
        <include refid = "COMMON.BASE_COLUMN_LIST" />
        goods_id as goodsId,
        goods_name as goodsName,
        measure_unit as measureUnit,
        current_stock as currentStock,
        real_stock as realStock,
        diff_stock as diffStock,
        reason as reason
    </sql>

    <sql id = "BaseWhereClause">
        <where>
            <trim prefixOverrides = "and">
                <include refid = "COMMON.BASE_WHERE_CLAUSE" />
                <if test = "goodsId != null">
                    and goods_id = #{goodsId}
                </if>
                <if test = "goodsName != null">
                    and goods_name = #{goodsName}
                </if>
                <if test = "measureUnit != null">
                    and measure_unit = #{measureUnit}
                </if>
                <if test = "currentStock != null">
                    and current_stock = #{currentStock}
                </if>
                <if test = "realStock != null">
                    and real_stock = #{realStock}
                </if>
                <if test = "diffStock != null">
                    and diff_stock = #{diffStock}
                </if>
                <if test = "reason != null">
                    and reason = #{reason}
                </if>
                <if test = "contentLike != null">
                    and goods_name like CONCAT ('%',#{contentLike}, '%')
                </if>
            </trim>
        </where>
    </sql>

    <sql id = "BaseUpdateSet">
        <set>
            <include refid = "COMMON.BASE_UPDATE_SET" />
            <if test = "goodsId != null">
                goods_id = #{goodsId},
            </if>
            <if test = "goodsName != null">
                goods_name = #{goodsName},
            </if>
            <if test = "measureUnit != null">
                measure_unit = #{measureUnit},
            </if>
            <if test = "currentStock != null">
                current_stock = #{currentStock},
            </if>
            <if test = "realStock != null">
                real_stock = #{realStock},
            </if>
            <if test = "diffStock != null">
                diff_stock = #{diffStock},
            </if>
            <if test = "reason != null">
                reason = #{reason}
            </if>
        </set>
    </sql>

    <!-- 查询总数 -->
    <select id = "selectCount" resultType = "java.lang.Integer">
        select count(id)
        from gradm_stock
        <include refid = "BaseWhereClause" />
    </select>

    <!-- 查询 -->
    <select id = "select" resultMap = "BaseResultMap">
        select
        <include refid = "BaseColumnList" />
        from gradm_stock
        <include refid = "BaseWhereClause" />
        <include refid = "COMMON.ORDER_BY" />
        <include refid = "COMMON.LIMIT" />
    </select>

    <!-- 根据ID查询 -->
    <select id = "selectById" resultMap = "BaseResultMap">
        select
        <include refid = "BaseColumnList" />
        from gradm_stock
        where id = #{id}
    </select>

    <!-- 根据IDS批量删除 -->
    <update id = "deleteByIds">
        update gradm_stock
        set is_deleted='Y'
        where id in
        (
        <foreach collection = "array" index = "index" item = "tag" separator = ",">
            #{tag}
        </foreach>
        )
    </update>

    <!-- 根据ID删除 -->
    <update id = "deleteById">
        update gradm_stock
        set is_deleted='Y'
        where id=#{id}
    </update>

    <!-- 删除 -->
    <delete id = "delete">
        update gradm_stock
        set is_deleted='Y'
        <include refid = "BaseWhereClause" />
    </delete>

    <!-- 添加   -->
    <insert id = "insert" useGeneratedKeys = "true" keyProperty = "id">
        insert into gradm_stock (
        <include refid = "COMMON.BASE_INSERT_COLUMN" />
        goods_id,
        goods_name,
        measure_unit,
        current_stock,
        real_stock,
        diff_stock,
        reason
        )
        values (
        <include refid = "COMMON.BASE_INSERT_VALUE" />
        #{goodsId},
        #{goodsName},
        #{measureUnit},
        #{currentStock},
        #{realStock},
        #{diffStock},
        #{reason}
        )
    </insert>

    <!-- 通过ID更新 -->
    <update id = "updateById">
        update gradm_stock
        <include refid = "BaseUpdateSet" />
        where id = #{id}
    </update>

</mapper>
